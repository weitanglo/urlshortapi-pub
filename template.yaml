Transform: AWS::Serverless-2016-10-31
Parameters:
  StageName:
    Type: String
    Default: dev
  subDomain:
    Type: String
    Default: url.loweitang.com
  HostedZoneId:
    Type: String
    Default: Z06146261K6JRFZIWWUX1
  fullQLSubdomain:
    Type: String
    Default: url.loweitang.com.
  fullQLDomainName:
    Type: String
    Default: loweitang.com.
  domainName:
    Type: String
    Default: loweitang.com
  secretName:
    Type: String
    Default: firebase-url-shortner
  SenderEmail:
    Type: String
    Default: low.texeg@gmail.com
  emailRegion:
    Type: String
    Default: ap-northeast-1
  jwtIssuer:
    Type: String
    Default: https://securetoken.google.com/
  authorizerAudience:
    Type: String
    Default: short-url-c6ea4
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamoDb:GetItem
                  - dynamoDb:PutItem
                  - dynamoDb:Query
                  - dynamoDb:UpdateItem
                  - dynamoDb:Scan
                Resource:
                  - !GetAtt usertable.Arn
                  - !Sub ${usertable.Arn}/*
        - PolicyName: SecretManager
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${secretName}-*
        - PolicyName: EmailPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'
  HttpApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref subDomain
      DomainValidationOptions:
        - DomainName: !Ref subDomain
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS
  HttpApiDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Ref subDomain
      DomainNameConfigurations:
        - CertificateArn: !Ref HttpApiCertificate
          EndpointType: REGIONAL
  ARecordApiDomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref fullQLDomainName
      Name: !Ref fullQLSubdomain
      Type: A
      AliasTarget:
        DNSName: !GetAtt HttpApiDomainName.RegionalDomainName
        HostedZoneId: !GetAtt HttpApiDomainName.RegionalHostedZoneId
        EvaluateTargetHealth: false
  HttpApiMap:
    Type: AWS::ApiGatewayV2::ApiMapping
    DependsOn: HttpApiDomainName
    Properties:
      ApiId: !Ref shorturlApi
      DomainName: !Ref subDomain
      Stage: !Ref StageName
  createurlFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: createurlFunction
      CodeUri: src/createurl
      Handler: createurl.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        urlshortnerApiPOSTcreateurl:
          Type: HttpApi
          Properties:
            Path: /createurl
            Method: POST
            ApiId: !Ref shorturlApi
      Environment:
        Variables:
          URLSHORTNERTABLE_TABLE_NAME: !Ref urlshortnertable
          URLSHORTNERTABLE_TABLE_ARN: !GetAtt urlshortnertable.Arn
          DOMAIN_NAME_PARAM: !Ref domainName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref urlshortnertable
  createurlFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${createurlFunction}
  shorturlApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: shorturlApi
      StageName: !Ref StageName
      Auth:
        Authorizers:
          HttpAuthorizer:
            JwtConfiguration:
              issuer: !Sub ${jwtIssuer}${authorizerAudience}
              audience:
                - !Ref authorizerAudience
            IdentitySource: $request.header.Authorization
        DefaultAuthorizer: HttpAuthorizer
  urlshortnertable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: shortCode
          AttributeType: S
        - AttributeName: createdBy
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UniqueKeyIndex
          KeySchema:
            - AttributeName: shortCode
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: createdByIndex
          KeySchema:
            - AttributeName: createdBy
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  geturlsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: geturlsFunction
      CodeUri: src/geturls
      Handler: geturls.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          URLSHORTNERTABLE_TABLE_NAME: !Ref urlshortnertable
          URLSHORTNERTABLE_TABLE_ARN: !GetAtt urlshortnertable.Arn
          DOMAIN_NAME_PARAM: !Ref domainName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref urlshortnertable
      Events:
        urlshortnerApiGETgeturls:
          Type: HttpApi
          Properties:
            Path: /geturls
            Method: GET
            ApiId: !Ref shorturlApi
  geturlsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${geturlsFunction}
  deleteurlFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: deleteurlFunction
      CodeUri: src/deleteurl
      Handler: deleteurl.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          URLSHORTNERTABLE_TABLE_NAME: !Ref urlshortnertable
          URLSHORTNERTABLE_TABLE_ARN: !GetAtt urlshortnertable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref urlshortnertable
      Events:
        urlshortnerApiDELETEdeleteurlid:
          Type: HttpApi
          Properties:
            Path: /deleteurl/{id}
            Method: DELETE
            ApiId: !Ref shorturlApi
  deleteurlFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${deleteurlFunction}
  redirectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: redirectFunction
      CodeUri: src/redirect
      Handler: redirect.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          URLSHORTNERTABLE_TABLE_NAME: !Ref urlshortnertable
          URLSHORTNERTABLE_TABLE_ARN: !GetAtt urlshortnertable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref urlshortnertable
      Events:
        urlshortnerApiGETredirect:
          Type: HttpApi
          Properties:
            Path: /{short_Code}
            Method: GET
            ApiId: !Ref shorturlApi
            Auth:
              Authorizer: NONE
  redirectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${redirectFunction}
  signupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: signupFunction
      Role: !GetAtt LambdaRole.Arn
      CodeUri: src/signup
      Handler: signup.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USERTABLE_TABLE_NAME: !Ref usertable
          USERTABLE_TABLE_ARN: !GetAtt usertable.Arn
          Secret_Name: !Ref secretName
          SENDER_EMAIL: !Ref SenderEmail
          EMAIL_REGION: !Ref emailRegion
      Events:
        urlshortnerApiPOSTsignup:
          Type: HttpApi
          Properties:
            Path: /signup
            Method: POST
            ApiId: !Ref shorturlApi
            Auth:
              Authorizer: NONE
      Layers:
        - !Ref Layer
  signupFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${signupFunction}
  usertable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  Layer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Layer ${ResourceName}
        - ResourceName: Layer
      ContentUri: src/Layer
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.10
  loginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: loginFunction
      Role: !GetAtt LambdaRole.Arn
      CodeUri: src/login
      Handler: login.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        urlshortnerApiPOSTlogin:
          Type: HttpApi
          Properties:
            Path: /login
            Method: POST
            ApiId: !Ref shorturlApi
            Auth:
              Authorizer: NONE
      Environment:
        Variables:
          Secret_Name: !Ref secretName
      Layers:
        - !Ref Layer
  loginFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${loginFunction}